% $Id: perpage.sty,v 1.10 2006/04/13 09:08:05 dak Exp $
% Copyright 2002, 03, 04, 05, 06  David Kastrup  <dak@gnu.org>
% Licence: GPL version 2 or later
%
% The \texttt{perpage} package adds the ability to reset counters per
% page and/or keep their occurences sorted in order of appeareance on
% the page.
%
% It works by attaching itself to the code for \cmd{\stepcounter} and
% will then modify the given counter according to information written
% to the |.aux| file, which means that multiple passes may be needed.
% Since it uses the internals of the \cmd{\label} mechanism, the need
% for additional passes will get announced by \LaTeX\ as ``labels may
% have changed''.
%
% \DescribeMacro{\MakePerPage}
% \begin{quote}
%   |\MakePerPage[2]{footnote}|
% \end{quote}
% will start footnote numbers with~2 on each page (the optional
% argument defaults to~1).  2~might be a strange number, unless you
% have used something like
% \begin{quote}
%   \renewcommand\thefootnote{\fnsymbol{footnote}}
% \end{quote}
% and want to start off with a dagger.  This may need multiple passes
% to work: \LaTeX\ will complain about changed labels if you need
% another pass.  It is also noteworthy that it might be a good idea to
% redefine |\@cnterr| if you do that: on the first pass, footnotes are
% not reset per page and things like |\fnsymbol| will quickly exhaust
% the valid ranges.
%
% \DescribeMacro{\MakeSorted}
% \begin{quote}
%   |\MakeSorted{figure}|
% \end{quote}
% will make the |figure| counter get `sorted': this means that counter
% values will be assigned in order of appearance in the output, not in
% order of appearance in the source code.  For example, the order of
% interspersed one- and two-column figures might get mixed up by
% \LaTeX\ in the output.  Making the counter sorted will fix the order
% to match the order of appearance.  A similar problem is when
% ordinary footnotes are present in floating material (this does not
% work in standard \LaTeX, but might do so when using |manyfoot.sty|
% or |bigfoot.sty|): this might jumble their order in the output, and
% making their counter sorted will make things appear fine again.
%
% While this would not fix the order in the table of figures,
% fortunately the respective entries actually get written out in order
% of appearance in the output anyway, so this indeed fixes the
% problem.
%
% Manually setting the counter does not lead to reliable results in
% general; as a special case, however, resetting it to zero is
% recognized.  The point where it is reset in the source code
% separates `count groups': everything in the source before that point
% is assigned sorted numbers separately from everything appearing
% behind it, and the sequence numbers start again with~1 with the
% first item appearing in the output (not the source) from the new
% count group.
%
% \DescribeMacro{\MakeSortedPerPage}
% \begin{quote}
%   |\MakeSortedPerPage[2]{table}|
% \end{quote}
% will make the table numbers restart at 2 on each page \emph{and}
% will keep them sorted, to boot.  You can start a new count group by
% setting the counter to~0 (not~1!) manually, if you really must.  You
% will usually want to use something like
% \begin{quote}
%   |\renewcommand{\thefigure}{\thepage-\arabic{figure}}
% \end{quote}
% to go along with a page-wise figure number.  Note that it would be
% quite silly to start the ranges with~2: this is just an example for
% the optional argument in case that you ever need it.
%
% \DescribeMacro{\AddAbsoluteCounter}
% \begin{quote}
%   |\AddAbsoluteCounter{equation}|
% \end{quote}
% will create a counter |absequation| that will advance together with
% the counter |equation| but will not get reset along with it.  This
% is not sorted into output order, but just runs along with the
% sequence in the source file.  As a special case, the counter
% |abspage| is created in this manner and \cmd{\theabspage} is defined
% as an arabic number that works in the same contexts as \cmd{\page}
% (namely, gets properly deferred by \cmd{\protected@write}).
%
% \DescribeMacro{\theperpage}
% If you want to label things also on a per page base, for example
% with
% \begin{quote}
%   |\renewcommand{\thefigure}{\thepage-\arabic{figure}}|
% \end{quote}
% you'll have the problem that \thepage is updated asynchronously with
% the real page, since \TeX\ does not know which page the figure will
% end up.  If you have used the |perpage| package for modifying the
% figure counter, however, at the point where the counter is
% incremented, the macro \cmd{\theperpage} will be set to the correct
% value corresponding to the actual page breaks.  Note that this macro
% is shared between all counters, so advancing a different counter
% under control of |perpage| will render \cmd{\thefigure} incorrect.
% \StopEventually{}
%
% It works in the following manner: The basic work is done through
% attaching help code to the counter's reset list.  Each counter has
% an associated absolute id that is counted through continuously and
% is never reset, thus providing a unique frame of reference.  Sorted
% and perpage counters work by writing out information to the
% \file{.aux} file.
%
% The information we maintain for each counter while processing the
% source file are:
% \begin{itemize}
% \item The absolute counter id.
% \item The last counter value so that we can check whether the
%   sequence has been interrupted.
% \item The current scope id.
% \item Its starting value.
% \end{itemize}
%
% The information written to the file consists of:
% \begin{itemize}
% \item The absolute counter id.
% \item The current scope id.
% \item The scope's starting value.
% \item The absolute counter id of a superior counter.
% \end{itemize}
%
% Sorted counters work by writing out the current absolute id and
% range id into the |.aux| file each time the counter gets incremented.
% Whenever the counter is changed in a manner different from being
% incremented, a new counter scope gets started.  Each counter scope
% has its own independently assigned counter numbers and is associated
% with its absolute id starting value.  So as each counter is
% incremented, we write out the triple of current absolute id, counter
% scope and initial value for the scope.  Scope changes when a value
% assigned from the file differs from the `natural' value.  When the
% file is read in, counter movements are tracked.  Each counter that
% does not have its `natural' value, is having a counter setting
% recorded.
%
% Usage example:
% \MakePerPage[2]{footnote}
% will start footnote numbers with 2 on each page (the optional
% argument defaults to~1).  2~might be a strange number, unless
% you have |\renewcommand\thefootnote{\fnsymbol{footnote}}| and
% want to start off with a dagger.  This may need multiple passes
% to work: \LaTeX\ will complain about changed labels if you need
% another pass.
%
% Counters can also be sorted: this is important for things like
% numbered elements within numbered elements that can span several
% pages, like footnotes within tables mixed with ordinary footnotes
% and stuff like that.
%
% The stuff works by adding a pseudo-reset counter to the counter's
% dependent counter list.

\NeedsTeXFormat{LaTeX2e}
\def\next$#1: #2 #3${#2}
\ProvidesPackage{perpage}[\next$Date: 2006/04/13 09:08:05 $
  v\next$Revision: 1.10 $ Reset/sort counters per page]

\newcommand\AddAbsoluteCounter[1]
{\@ifundefined{c@abs#1}{%
    \expandafter\newcount\csname c@abs#1\endcsname
    \global\value{abs#1}\@ne
    \global\expandafter\let\csname cl@abs#1\endcsname\@empty
    \expandafter\xdef\csname theabs#1\endcsname{%
      \noexpand\number \csname c@abs#1\endcsname}%
    \global\@namedef{c@pabs@#1}{\z@=\z@{%
        \stepcounter{abs#1}%
        \afterassignment}\count@}%
    \@addtoreset{pabs@#1}{#1}}{}}

\AddAbsoluteCounter{page}

\def\theabspage{\ifx\thepage\relax
    \noexpand\theabspage
  \else
    \number\c@abspage
  \fi}

\newcommand*\MakePerPage[2][\@ne]{%
  \pp@makeperpage{#2}\c@pchk@{#1}}

\newcommand*\MakeSorted[1]{%
  \setcounter{#1}{\z@}%
  \pp@makeperpage{#1}\c@schk@{\@ne}}

\newcommand*\MakeSortedPerPage[2][\@ne]{%
  \pp@makeperpage{#2}\c@spchk@{#1}}

\@onlypreamble\MakePerPage
\@onlypreamble\MakeSorted
\@onlypreamble\MakeSortedPerPage

% \cmd{\pp@makeperpage} does the relevant things for modifying a
% counter.  It defines its reset value, it defines the correspoding
% absolute counter.  The absolute counter is also used for assigning
% numbers while reading the |.aux| file.  For this purpose it is
% assigned the initialized values here and in the enddocument hook
% (which is called before rereading the aux file), while the counter
% is reset to zero at the start of the document.
\def\pp@makeperpage#1#2#3{%
  \global\expandafter\mathchardef\csname c@pp@r@#1\endcsname=#3\relax
  \global\@namedef{c@pchk@#1}{#2{#1}}%
  \newcounter{pp@a@#1}%
  \setcounter{pp@a@#1}{#3}%
  \addtocounter{pp@a@#1}\m@ne
  \@addtoreset{pchk@#1}{#1}%
  \AtBeginDocument{\setcounter{pp@a@#1}\z@}%
  \edef\next{\noexpand\AtEndDocument{\noexpand\setcounter{pp@a@#1}{%
        \number\value{pp@a@#1}}}}\next}

\@onlypreamble\pp@makeperpage

% Check for an empty vertical list.

\def\pchk@vlist{%
  \ifcase
    \ifvmode
      \ifx\lastnodetype\@undefined
        \ifdim-\@m\p@=\prevdepth\ifdim\lastskip=\z@\ifnum\lastpenalty=\z@
          \@ne
        \fi\fi\fi
      \else
        \ifnum\lastnodetype=\m@ne \@ne \fi
      \fi
    \fi \z@
  \or
    \PackageWarning{perpage}{\string\stepcounter\space probably at start of
      vertical list:^^JYou might need to use \string\leavevmode\space
      before it to avoid vertical shifts}%
  \fi}

\def\pp@fetchctr#1{\expandafter\expandafter\expandafter\pp@fetchctrii
  \csname pp@r@#1@\number\value{pp@a@#1}\endcsname
  \@empty\@empty}

\global\let\theperpage\@empty

\def\pp@fetchctrii#1#2#3{\edef\pp@label{#1}%
  \edef\pp@page{#2}%
  \gdef\theperpage{#3}}

\def\pp@pagectr#1#2#3#4{\@ifundefined{c@pp@a@#1}{}{%
    \addtocounter{pp@a@#1}\@ne
    \edef\next{\noexpand
      \@newl@bel{pp@r@#1}{#2}{{\number\value{pp@a@#1}}{#3}%
        {#4}}}\next}}

\def\pp@ppagectr#1#2#3#4{\@ifundefined{c@pp@a@#1}{}{%
    \def\next{#3}%
    \expandafter\ifx\csname pp@page@#1\endcsname\next
      \addtocounter{pp@a@#1}\@ne
    \else
      \setcounter{pp@a@#1}{\value{pp@r@#1}}%
    \fi
    \global\expandafter\let\csname pp@page@#1\endcsname\next
    \edef\next{\noexpand
      \@newl@bel{pp@r@#1}{#2}{{\number\value{pp@a@#1}}{#3}%
        {#4}}}\next}}

\def\pp@spagectr#1#2#3#4{\@ifundefined{c@pp@a@#1}{}{%
    \count@0\csname pp@g@#1@#3\endcsname
    \advance\count@\@ne
    \expandafter\xdef\csname pp@g@#1@#3\endcsname{\number\count@}%
    \edef\next{\noexpand
      \@newl@bel{pp@r@#1}{#2}{{\number\count@}{#3}%
        {#4}}}\next}}


\def\pp@writectr#1#2#3{\edef\next{%
    \string#1{#2}{\number\value{pp@a@#2}}{#3}{\noexpand\thepage}}%
  \pchk@vlist
  \dimen@=\lastkern
  \ifdim\dimen@=\z@ \else \unkern\fi
  \protected@write\@auxout{}{\next}%
  \ifdim\dimen@=\z@ \nobreak \else \kern\dimen@\fi
  \afterassignment\endgroup\count@}

\def\c@pchk@#1{\z@=\z@
  \begingroup
  \pp@fetchctr{#1}\let\next\pp@page
  \addtocounter{pp@a@#1}\@ne
  \pp@fetchctr{#1}%
  \ifcase\ifx\next\pp@page\else\@ne\fi
    \ifnum\value{#1}=\z@\@ne\fi\z@
  \else
    \setcounter{#1}{\value{pp@r@#1}}%
  \fi
  \pp@writectr\pp@pagectr{#1}{\noexpand\theabspage}}

\def\c@schk@#1{\z@=\z@
  \begingroup
  \addtocounter{pp@a@#1}\@ne
  \ifnum\value{#1}=\@ne
    \expandafter\xdef\csname pp@g@#1\endcsname{\number\value{pp@a@#1}}%
    \edef\next{\noexpand\AtEndDocument{\global\let
      \expandafter\noexpand\csname pp@g@#1@\number\value{pp@a@#1}\endcsname
      \relax}}\next
  \fi
  \pp@fetchctr{#1}%
  \ifx\pp@page\@empty
  \else \setcounter{#1}{\pp@label}\fi
  \pp@writectr\pp@spagectr{#1}{\csname pp@g@#1\endcsname}}%

\def\c@spchk@#1{\z@=\z@
  \begingroup
  \addtocounter{pp@a@#1}\@ne
  \pp@fetchctr{#1}%
  \ifx\pp@page\@empty
  \else \setcounter{#1}{\pp@label}\fi
  \pp@writectr\pp@ppagectr{#1}{\noexpand\theabspage}}

\endinput
