% $Id: perpage.sty,v 1.6 2004/03/29 01:53:27 dak Exp $
% Copyright 2002, 2003, 2004 David Kastrup <dak@gnu.org>
% Licence: GPL version 2 or later
%
% The \texttt{perpage} package adds the ability to reset counters per
% page, and/or to keep their occurences sorted in order of appeareance
% on the page.  It also keeps uniquely ascending ids associated with
% each counters that are used for keeping footnotes ordered in
% \file{bigfoot.sty}.
%
% \DescribeMacro{\MakePerPage}
% \begin{quote}
%   |\MakePerPage[2]{footnote}|
% \end{quote}
% will start footnote numbers with 2 on each page (the optional
% argument defaults to~1).  2~might be a strange number, unless you
% have used something like
% \begin{quote}
%   \renewcommand\thefootnote{\fnsymbol{footnote}}
% \end{quote}
% and want to start off with a dagger.  This may need multiple passes
% to work: \LaTeX\ will complain about changed labels if you need
% another pass.  It is also noteworthy that it might be a good idea to
% redefine |\@cnterr| if you do that: on the first pass, footnotes are
% not reset per page and things like |\fnsymbol| will quickly exhaust
% the valid ranges.
%
% \StopEventually{}
%
% It works in the following manner: The basic work is done through
% attaching help code to the counter's reset list.  Each counter has
% an associated absolute id that is counted through continuously and
% is never reset, thus providing a unique frame of reference.  Sorted
% and perpage counters work by writing out information to the
% \file{.aux} file.
%
% The information we maintain for each counter while processing the
% source file are:
% \begin{itemize}
% \item The absolute counter id.
% \item The last counter value so that we can check whether the
%   sequence has been interrupted.
% \item The current scope id.
% \item Its starting value.
% \end{itemize}
%
% The information written to the file consists of:
% \begin{itemize}
% \item The absolute counter id.
% \item The current scope id.
% \item The scope's starting value.
% \item The absolute counter id of a superior counter.
% \end{itemize}
%
% Sorted counters work by writing out the current absolute id and
% range id into the .aux file each time the counter gets incremented.
% Whenever the counter is changed in a manner different from being
% incremented, a new counter scope gets started.  Each counter scope
% has its own independently assigned counter numbers and is associated
% with its absolute id starting value.  So as each counter is
% incremented, we write out the triple of current absolute id, counter
% scope and initial value for the scope.  Scope changes when a value
% assigned from the file differs from the `natural' value.  When the
% file is read in, counter movements are tracked.  Each counter that
% does not have its `natural' value, is having a counter setting
% recorded.
%
% A count group is determined by the current set of contiguous
% counting values in input order.  It is identified by the
% corresponding absolute counting value.


%
% Counters can be reset on changes of an ``output assigned'' variable
% like the page counter.  For example, if one has a footnote and
% subfootnote counting scheme, then subnotes will usually be 



%  This information is read
% in at start of document time and evaluated to generate the ac

% Usage example:
% \MakePerPage[2]{footnote}
% will start footnote numbers with 2 on each page (the optional
% argument defaults to~1).  2~might be a strange number, unless
% you have |\renewcommand\thefootnote{\fnsymbol{footnote}}| and
% want to start off with a dagger.  This may need multiple passes
% to work: \LaTeX\ will complain about changed labels if you need
% another pass.
%
% Counters can also be sorted: this is important for things like
% numbered elements within numbered elements that can span several
% pages, like footnotes within tables mixed with ordinary footnotes
% and stuff like that.
%
% The stuff works by adding a pseudo-reset counter to the counter's
% dependent counter list.

\NeedsTeXFormat{LaTeX2e}
\def\next$#1: #2 #3${#2}
\ProvidesPackage{perpage}[\next$Date: 2004/03/29 01:53:27 $
  v\next$Revision: 1.6 $ Reset/sort counters per page]

\newcommand\AddAbsoluteCounter[1]
{\@ifundefined{c@abs#1}{%
    \expandafter\newcount\csname c@abs#1\endcsname
    \global\value{abs#1}\@ne
    \global\expandafter\let\csname cl@abs#1\endcsname\@empty
    \expandafter\xdef\csname theabs#1\endcsname{%
      \noexpand\number \csname c@abs#1\endcsname}%
    \global\@namedef{c@pabs@#1}{\z@=\z@{%
        \stepcounter{abs#1}%
        \afterassignment}\count@}%
    \@addtoreset{pabs@#1}{#1}}{}}

\def\theabspage{\ifx\thepage\relax
    \noexpand\theabspage
  \else
    \number\c@abspage
  \fi}

\AddAbsoluteCounter{page}

% \cmd{\MakeSorted} works by mapping absolute numbers to absolute
% numbers.  There can be a superior counter given that will cause a
% reset when changed (this works in a completely different way than
% the usual manner: the respective corresponding absolute counter
% value gets written out to the file.  All inferior counter values
% sharing the same superior absolute counter value are mapped to the
% range $[1..\infty)$.  In addition, we introduce counter set
% groups.  Whenever a counter is found to have an unexpected value
% (namely, not being reset when its superior counter is reset, or
% being incremented when the superior counter has not been touched),
% we record a new `set group' with the corresponding value.
% Unexpected values are checked for before counter values from the
% |.aux| file are consulted.
% For now we don't do much here.  We write out a label

%\newcommand\MakeSorted[2][\@ne]{



\newcommand*\MakePerPage[2][\@ne]{%
  \pp@makeperpage{#2}\c@pchk@{#1}}

\newcommand*\MakeSorted[1]{%
  \count@\value{#1}%
  \advance\count@\@ne
  \pp@makeperpage{#1}\c@schk@{\count@}}

\newcommand*\MakeSortedPerPage[2][\@ne]{%
  \pp@makeperpage{#2}\c@spchk@{#1}}

\def\pp@makeperpage#1#2#3{%
  \global\expandafter\mathchardef\csname c@pp@r@#1\endcsname=#3\relax
  \global\@namedef{c@pchk@#1}{#2{#1}}%
  \newcounter{pp@a@#1}%
  \setcounter{pp@a@#1}{#3}%
  \addtocounter{pp@a@#1}\m@ne
  \@addtoreset{pchk@#1}{#1}%
  \AtBeginDocument{\setcounter{pp@a@#1}\z@}%
  \edef\next{\noexpand\AtEndDocument{\noexpand\setcounter{pp@a@#1}{\arabic{pp@a@#1}}}}\next}

\def\pchk@vlist{%
  \ifvmode\ifdim\prevdepth=-1000\p@\ifdim\lastskip=\z@\ifdim\lastpenalty=\z@
  \PackageWarning{perpage}{\string\stepcounter\space probably at start of
  vertical list:^^JYou might need to use \string\leavevmode\space
  before it to avoid vertical shifts}\fi\fi\fi\fi}

\def\pp@fetchctr#1{\expandafter\expandafter\expandafter\pp@fetchctrii
  \csname pp@r@#1@\arabic{pp@a@#1}\endcsname
  \@empty}

\def\pp@fetchctrii#1#2{\edef\pp@label{#1}%
  \edef\pp@page{#2}}

\def\pp@pagectr#1#2#3{\@ifundefined{c@pp@a@#1}{}{%
    \addtocounter{pp@a@#1}\@ne
    \edef\next{\noexpand
      \@newl@bel{pp@r@#1}{#2}{{\arabic{pp@a@#1}}{#3}}}\next}}

\def\pp@ppagectr#1#2#3{\@ifundefined{c@pp@a@#1}{}{%
    \def\next{#3}%
    \expandafter\ifx\csname pp@page@#1\endcsname\next
      \addtocounter{pp@a@#1}\@ne
    \else
      \setcounter{pp@a@#1}{\value{pp@r@#1}}%
    \fi
    \global\expandafter\let\csname pp@page@#1\endcsname\next
    \edef\next{\noexpand
      \@newl@bel{pp@r@#1}{#2}{{\arabic{pp@a@#1}}{#3}}}\next}}


\def\pp@writectr#1#2{\edef\next{%
    \string#1{#2}{\arabic{pp@a@#2}}{\noexpand\thepage}}%
  \pchk@vlist
  \dimen@=\lastkern
  \ifdim\dimen@=\z@ \else \unkern\fi
  \protected@write\@auxout{}{\next}%
  \ifdim\dimen@=\z@ \nobreak \else \kern\dimen@\fi
  \afterassignment\endgroup\count@}

\def\c@pchk@#1{\z@=\z@
  \begingroup
  \pp@fetchctr{#1}\let\next\pp@page
  \addtocounter{pp@a@#1}\@ne
  \pp@fetchctr{#1}%
  \ifcase\ifx\next\pp@page\else\@ne\fi
    \ifnum\value{#1}=\z@\@ne\fi\z@
  \else
    \setcounter{#1}{\value{pp@r@#1}}%
  \fi
  \pp@writectr\pp@pagectr{#1}}

\def\c@schk@#1{\z@=\z@
  \begingroup
  \addtocounter{pp@a@#1}\@ne
  \pp@fetchctr{#1}%
  \ifx\pp@page\@empty
  \else \setcounter{#1}{\pp@label}\fi
  \pp@writectr\pp@pagectr{#1}}

\def\c@spchk@#1{\z@=\z@
  \begingroup
  \addtocounter{pp@a@#1}\@ne
  \pp@fetchctr{#1}%
  \ifx\pp@page\@empty
  \else \setcounter{#1}{\pp@label}\fi
  \pp@writectr\pp@ppagectr{#1}}

\endinput
